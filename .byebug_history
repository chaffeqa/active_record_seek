q
puts Group.seek("a.members.id.eq" => 1, "a.members.name.eq" => "2", "b.members.id.eq" => 3, "b.members.name.eq" => "4").where(id: 1).to_sql
puts Group.seek("members.id.eq" => 1, "members.name.eq" => "2").where(id: 1).to_sql
puts Group.where(id: 1).seek("members.id.eq" => 1, "members.name.eq" => "2").to_sql
puts s1,s2
s2 = %Q{SELECT "groups".* FROM "groups" WHERE "groups"."id" IN (SELECT "member_groups"."group_id" FROM "member_groups" WHERE "member_groups"."member_id" IN (SELECT "members"."id" FROM "members" WHERE ("members"."id" = 1) AND ("members"."name" = '2')))}
s1 = %Q{SELECT "groups".* FROM "groups" WHERE "groups"."id" IN (SELECT "member_groups"."group_id" FROM "member_groups" WHERE "member_groups"."member_id" IN (SELECT "members"."id" FROM "members" WHERE "members"."id" = 1 AND "members"."name" = '2'))}
puts Group.seek("members.id.eq" => 1, "members.name.eq" => "2").to_sql
puts Group.where(Group.arel_table[:id].eq(1).to_sql).to_sql
c
q
puts Group.where(Group.arel_table[:id].eq(1).to_sql).to_sql
Group.arel_table[:id].eq(1).to_sql
puts Group.where(Group.arel_table[:id].eq(1)).to_sql
puts Group.where('"members"."id" = 1').to_sql
Group.where('"members"."id" = 1').to_sql
Group.where('"members"."id" = 1')
puts Group.seek("members.id.eq" => 1, "members.name.eq" => "2").to_sql
puts Group.seek("members.id.eq" => 1).to_sql
Group.seek("members.id.eq" => 1).to_sql
Group.seek("members.id_eq" => 1)
Group.count
q
ActiveRecord::Base.connection.active?
ActiveRecord::Base.connected?
ActiveRecord::Base.connection.disconnect!
ActiveRecord::Base.connection
ActiveRecord::Base.connected?
connect!
ActiveRecord::Base.connected?
q
puts ActiveRecord::Base.connected?
puts ActiveRecord::Base.connection.tables
puts ActiveRecord::Base.connected?
connect!
puts ActiveRecord::Base.connected?
puts ActiveRecord::Base.public_methods.sort - Object.instance_methods
puts ActiveRecord::Base.class_methods.sort 
puts ActiveRecord::Base.connection.public_methods.sort - Object.instance_methods
q
ActiveRecord::Base.connection.active?
connect!
ActiveRecord::Base.connection.active?
ActiveRecord::Base.connection.disconnect!
ActiveRecord::Base.connection.active?
puts ActiveRecord::Base.connection.public_methods.sort - Object.instance_methods
ActiveRecord::Base.connection.public_methods.sort - Object.instance_methods
ActiveRecord::Base.connection.connected?
ActiveRecord::Base.connected?
connect!
ActiveRecord::Base.connection.connected?
ActiveRecord::Base.connectedd?
ActiveRecord::Base.connected?
q
ActiveRecord::Base.connection.execute("DROP DATABASE :member:")
ActiveRecord::Base.connection
n
q
puts expected_sql.lines.map(&:strip).join == actual_sql
puts expected_sql.lines.map(&:strip).join
puts expected_sql.lines.map(&:lstrip).join
puts expected_sql.lines.map(&:lstrip)
puts expected_sql
c
Group.all.object_id == Group.all.object_id
Group.all == Group.where(id: 1)
Group.all == Group.all
query.reflect_on_association(:members)
query.reflect_on_association(:members).klass
query.klass
query.reflect_on_association(:members)
c
q
query.reflect_on_association(:member_groups)
query.klass
query.reflect_on_association(association).instance_variable_get(:@delegate_reflection)
query.reflect_on_association(association).delegate_reflection
query.reflect_on_association(association)
association
c
association
query
query.reflect_on_association(association)
c
q
predicate.clause.all.where("1=1")
predicate.clause.all
predicate.clause.to_sql
predicate.clause.class
predicate.arel_column.eq(1).to_sql
predicate.arel_column.eq(1)
predicate.arel_column
predicate.clause.arel_table
predicate.clause.arel_column
predicate.clause.class.where("1=1").count
predicate.clause.class
predicate.class
c
predicate.clause.class
c
clause.class
clause
c
operator
q
class Blah; end;
class Blah; end
self.operator
operator
key
instance_variables
operator
@operator
parts
parts.pop
parts = @key.split(".")
column
key
operator
instance_variables
